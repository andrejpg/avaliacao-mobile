package com.example.avaliacaomobile.controller

import android.os.Bundle
import android.view.View
import android.widget.Button
import android.widget.EditText
import android.widget.Toast
import androidx.activity.enableEdgeToEdge
import androidx.appcompat.app.AppCompatActivity
import com.example.avaliacaomobile.R
import com.example.avaliacaomobile.data.dao.CarModelDAO
import com.example.avaliacaomobile.model.CarModel

class NewCar: AppCompatActivity() {

    private lateinit var carModelDAO: CarModelDAO
    private var carID: Int = 0 // Represents the ID of the car being edited, or 0 for a new car
    private lateinit var etModelo: EditText // Changed from etName
    private lateinit var etMarca: EditText  // Changed from etHouse
    private lateinit var etAno: EditText    // Changed from etAncestry
    private lateinit var btnDelete: Button

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContentView(R.layout.activity_new_car) // Assuming your layout file is activity_new_car.xml

        carModelDAO = CarModelDAO(this)

        // Initialize EditText fields with car-themed IDs from your layout
        etModelo = findViewById(R.id.etModelo) // Assuming R.id.etModelo in your XML
        etMarca = findViewById(R.id.etMarca)   // Assuming R.id.etMarca in your XML
        etAno = findViewById(R.id.etAno)       // Assuming R.id.etAno in your XML
        btnDelete = findViewById(R.id.btnDelete)

        // Check if we are in edit mode
        carID = intent.getIntExtra("carId", 0) // Changed from "charId"
        if (carID != 0) {
            btnDelete.visibility = View.VISIBLE // Changed from Button.VISIBLE to View.VISIBLE for consistency
            loadCarDetails() // Renamed from editChar
        }
    }

    fun saveCar(view: View) { // Renamed from saveChar
        val modelo = etModelo.text.toString()
        val marca = etMarca.text.toString()
        val anoStr = etAno.text.toString()

        if (modelo.isNotEmpty() && marca.isNotEmpty() && anoStr.isNotEmpty()) {
            val ano = anoStr.toIntOrNull() // Safely convert year to Int
            if (ano == null) {
                Toast.makeText(this, "Por favor, insira um ano válido.", Toast.LENGTH_SHORT).show()
                return
            }

            if (carID == 0) { // Corrected logic: carID == 0 means new car
                // Insertion of a new car
                val newCar = CarModel(
                    // id will be auto-generated by the database
                    modelo = modelo,
                    marca = marca,
                    ano = ano.toString()
                )
                val resultId = carModelDAO.addCarModel(newCar) // Assuming addCar method in DAO
                if (resultId > -1) {
                    Toast.makeText(this, "Carro adicionado", Toast.LENGTH_SHORT).show()
                    finish()
                } else {
                    Toast.makeText(this, "Erro ao adicionar carro", Toast.LENGTH_SHORT).show()
                }
            } else {
                // Update of an existing car
                val updatedCar = CarModel(
                    id = carID,
                    modelo = modelo,
                    marca = marca,
                    ano = ano.toString()
                )
                val rowsAffected = carModelDAO.updateCarModel(updatedCar) // Assuming updateCar method in DAO
                if (rowsAffected > 0) {
                    Toast.makeText(this, "Carro atualizado", Toast.LENGTH_SHORT).show()
                    finish()
                } else {
                    Toast.makeText(this, "Erro ao atualizar carro", Toast.LENGTH_SHORT).show()
                }
            }
        } else {
            Toast.makeText(this, "Preencha todos os campos", Toast.LENGTH_SHORT).show()
        }
    }

    private fun loadCarDetails() { // Renamed from editChar
        val car = carModelDAO.getCarModelById(carID) // Assuming getCarById method in DAO
        car?.let {
            etModelo.setText(it.modelo)
            etMarca.setText(it.marca)
            etAno.setText(it.ano.toString()) // Convert Int to String for EditText
        }
    }

    fun deleteCar(view: View) { // Renamed from deleteChar
        if (carID != 0) {
            val rowsAffected = carModelDAO.deleteCarModel(carID) // Assuming deleteCar method in DAO
            if (rowsAffected > 0) {
                Toast.makeText(this, "Carro excluído", Toast.LENGTH_SHORT).show()
                finish()
            } else {
                Toast.makeText(this, "Erro ao excluir carro", Toast.LENGTH_SHORT).show()
            }
        }
    }
}